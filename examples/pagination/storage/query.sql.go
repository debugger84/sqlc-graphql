// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package storage

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (
    name, bio
) VALUES (
             $1, $2
         )
RETURNING id, name, bio, status, created_at`

type CreateAuthorParams struct {
	Name string      `json:"name"`
	Bio  pgtype.Text `json:"bio"`
}

// gql: Mutation
func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Author, error) {
	row := q.db.QueryRow(ctx, createAuthor, arg.Name, arg.Bio)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deactivateAuthor = `-- name: DeactivateAuthor :one
UPDATE authors
set status = 'inactive'
WHERE id = $1
RETURNING id, name, bio, status, created_at`

// gql: Mutation
func (q *Queries) DeactivateAuthor(ctx context.Context, id int64) (Author, error) {
	row := q.db.QueryRow(ctx, deactivateAuthor, id)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE id = $1`

// gql: Mutation
func (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAuthor, id)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, name, bio, status, created_at FROM authors
WHERE id = $1 LIMIT 1`

// gql: Query
func (q *Queries) GetAuthor(ctx context.Context, id int64) (Author, error) {
	row := q.db.QueryRow(ctx, getAuthor, id)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, name, bio, status, created_at FROM authors
ORDER BY name LIMIT $1 OFFSET $2`

const listAuthorsTotal = `
SELECT count(*) as c FROM (SELECT id, name, bio, status, created_at FROM authors
ORDER BY name) as total_res LIMIT 1
`

type ListAuthorsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// gql: Query
func (q *Queries) ListAuthors(ctx context.Context, arg ListAuthorsParams) (AuthorPage, error) {
	rows, err := q.db.Query(ctx, listAuthors, arg.Limit+1, arg.Offset)
	if err != nil {
		return AuthorPage{}, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Bio,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return AuthorPage{}, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return AuthorPage{}, err
	}
	var total int
	if err := q.db.QueryRow(ctx, listAuthorsTotal).Scan(&total); err != nil {
		return AuthorPage{}, err
	}
	limit := int(arg.Limit)
	if limit > len(items) {
		limit = len(items)
	}
	return AuthorPage{Items: items[:limit], HasNext: len(items) > int(arg.Limit), Total: total}, nil
}

const updateAuthor = `-- name: UpdateAuthor :one
UPDATE authors
set name = $2,
    bio = $3
WHERE id = $1
RETURNING id, name, bio, status, created_at`

type UpdateAuthorParams struct {
	ID   int64       `json:"id"`
	Name string      `json:"name"`
	Bio  pgtype.Text `json:"bio"`
}

// gql: Mutation
func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) (Author, error) {
	row := q.db.QueryRow(ctx, updateAuthor, arg.ID, arg.Name, arg.Bio)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
