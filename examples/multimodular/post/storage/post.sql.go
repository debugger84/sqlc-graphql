// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: post.sql

package storage

import (
	"context"

	uuid "github.com/gofrs/uuid"
)

const getLastPosts = `-- name: GetLastPosts :many
SELECT id, title, content, status, author_id, created_at, published_at FROM post.post WHERE status= 'published' ORDER BY created_at DESC LIMIT $2 OFFSET $1
`

type GetLastPostsParams struct {
	After int32 `json:"after"`
	Count int32 `json:"count"`
}

// gql: Query.lastPosts
func (q *Queries) GetLastPosts(ctx context.Context, arg GetLastPostsParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, getLastPosts, arg.After, arg.Count)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Status,
			&i.AuthorID,
			&i.CreatedAt,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMyDrafts = `-- name: GetMyDrafts :many
SELECT id, title, content, status, author_id, created_at, published_at FROM post.post WHERE author_id = $1 AND status = 'draft' ORDER BY created_at DESC LIMIT $3 OFFSET $2
`

type GetMyDraftsParams struct {
	AuthorID uuid.UUID `json:"authorId"`
	After    int32     `json:"after"`
	Count    int32     `json:"count"`
}

// gql: Query.myDrafts
func (q *Queries) GetMyDrafts(ctx context.Context, arg GetMyDraftsParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, getMyDrafts, arg.AuthorID, arg.After, arg.Count)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Status,
			&i.AuthorID,
			&i.CreatedAt,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPost = `-- name: GetPost :one
SELECT id, title, content, status, author_id, created_at, published_at FROM post.post WHERE id = $1
`

// gql: Query.post
func (q *Queries) GetPost(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRow(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Status,
		&i.AuthorID,
		&i.CreatedAt,
		&i.PublishedAt,
	)
	return i, err
}

const makeDraft = `-- name: MakeDraft :one
INSERT INTO post.post (id, title, content, author_id, status, created_at)
VALUES ($1, $2, $3, $4, 'draft', now())
RETURNING id, title, content, status, author_id, created_at, published_at
`

type MakeDraftParams struct {
	ID       uuid.UUID `json:"id"`
	Title    string    `json:"title"`
	Content  string    `json:"content"`
	AuthorID uuid.UUID `json:"authorId"`
}

// gql: Mutation
func (q *Queries) MakeDraft(ctx context.Context, arg MakeDraftParams) (Post, error) {
	row := q.db.QueryRow(ctx, makeDraft,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.AuthorID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Status,
		&i.AuthorID,
		&i.CreatedAt,
		&i.PublishedAt,
	)
	return i, err
}

const publish = `-- name: Publish :one
UPDATE post.post SET status = 'published' WHERE id = $1 RETURNING id, title, content, status, author_id, created_at, published_at
`

// gql: Mutation
func (q *Queries) Publish(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRow(ctx, publish, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Status,
		&i.AuthorID,
		&i.CreatedAt,
		&i.PublishedAt,
	)
	return i, err
}
