// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: post.sql

package storage

import (
	"context"

	uuid "github.com/gofrs/uuid"
)

const getPosts = `-- name: GetPosts :one
SELECT id, title, content, status, author_id, created_at, published_at FROM post.post WHERE author_id = $1 ORDER BY created_at DESC
`

// gql: Query.posts
func (q *Queries) GetPosts(ctx context.Context, authorID uuid.UUID) (Post, error) {
	row := q.db.QueryRow(ctx, getPosts, authorID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Status,
		&i.AuthorID,
		&i.CreatedAt,
		&i.PublishedAt,
	)
	return i, err
}

const makeDraft = `-- name: MakeDraft :one
INSERT INTO post.post (id, title, content, author_id, status, created_at)
VALUES ($1, $2, $3, $4, 'draft', now())
RETURNING id, title, content, status, author_id, created_at, published_at
`

type MakeDraftParams struct {
	ID       int64     `json:"id"`
	Title    string    `json:"title"`
	Content  string    `json:"content"`
	AuthorID uuid.UUID `json:"authorId"`
}

// gql: Mutation
func (q *Queries) MakeDraft(ctx context.Context, arg MakeDraftParams) (Post, error) {
	row := q.db.QueryRow(ctx, makeDraft,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.AuthorID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Status,
		&i.AuthorID,
		&i.CreatedAt,
		&i.PublishedAt,
	)
	return i, err
}

const publish = `-- name: Publish :one
UPDATE post.post SET status = 'published' WHERE id = $1 RETURNING id, title, content, status, author_id, created_at, published_at
`

// gql: Mutation
func (q *Queries) Publish(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRow(ctx, publish, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Status,
		&i.AuthorID,
		&i.CreatedAt,
		&i.PublishedAt,
	)
	return i, err
}
