// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comment.sql

package storage

import (
	"context"

	uuid "github.com/gofrs/uuid"
)

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM "comment".comment
WHERE id = $1 and author_id = $2
`

type DeleteCommentParams struct {
	ID       uuid.UUID `json:"id"`
	AuthorID uuid.UUID `json:"authorId"`
}

// gql: Mutation.deleteComment
func (q *Queries) DeleteComment(ctx context.Context, arg DeleteCommentParams) error {
	_, err := q.db.Exec(ctx, deleteComment, arg.ID, arg.AuthorID)
	return err
}

const getPostComments = `-- name: GetPostComments :many
SELECT id, comment, author_id, post_id, created_at FROM "comment".comment
WHERE post_id = $1 LIMIT $3 OFFSET $2
`

type GetPostCommentsParams struct {
	PostID uuid.UUID `json:"postId"`
	After  int32     `json:"after"`
	Count  int32     `json:"count"`
}

// gql: Post.comments
func (q *Queries) GetPostComments(ctx context.Context, arg GetPostCommentsParams) ([]Comment, error) {
	rows, err := q.db.Query(ctx, getPostComments, arg.PostID, arg.After, arg.Count)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Comment,
			&i.AuthorID,
			&i.PostID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const leaveComment = `-- name: LeaveComment :one
INSERT INTO "comment".comment (id, comment, author_id, post_id, created_at)
VALUES ($1, $2, $3, $4, now())
RETURNING id, comment, author_id, post_id, created_at
`

type LeaveCommentParams struct {
	ID       uuid.UUID `json:"id"`
	Comment  string    `json:"comment"`
	AuthorID uuid.UUID `json:"authorId"`
	PostID   uuid.UUID `json:"postId"`
}

// gql: Mutation
func (q *Queries) LeaveComment(ctx context.Context, arg LeaveCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, leaveComment,
		arg.ID,
		arg.Comment,
		arg.AuthorID,
		arg.PostID,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Comment,
		&i.AuthorID,
		&i.PostID,
		&i.CreatedAt,
	)
	return i, err
}
