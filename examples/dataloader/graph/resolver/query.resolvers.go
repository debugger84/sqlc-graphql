package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"dataloader/graph/gen"
	"dataloader/storage"
	"github.com/jackc/pgx/v5/pgtype"
)

// CreateAuthor is the resolver for the CreateAuthor field.
func (r *mutationResolver) CreateAuthor(ctx context.Context, request storage.CreateAuthorParams) (
	storage.Author,
	error,
) {
	return r.Queries.CreateAuthor(ctx, request)
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, request storage.CreatePostParams) (storage.Post, error) {
	return r.Queries.CreatePost(ctx, request)
}

// DeactivateAuthor is the resolver for the DeactivateAuthor field.
func (r *mutationResolver) DeactivateAuthor(ctx context.Context, id int) (storage.Author, error) {
	return r.Queries.DeactivateAuthor(ctx, int64(id))
}

// DeleteAuthor is the resolver for the DeleteAuthor field.
func (r *mutationResolver) DeleteAuthor(ctx context.Context, id int) (bool, error) {
	err := r.Queries.DeleteAuthor(ctx, int64(id))
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateAuthor is the resolver for the UpdateAuthor field.
func (r *mutationResolver) UpdateAuthor(ctx context.Context, request storage.UpdateAuthorParams) (
	storage.Author,
	error,
) {
	return r.Queries.UpdateAuthor(ctx, request)
}

// GetAuthor is the resolver for the GetAuthor field.
func (r *queryResolver) GetAuthor(ctx context.Context, id int) (storage.Author, error) {
	return r.Queries.GetAuthor(ctx, int64(id))
}

// GetPosts is the resolver for the getPosts field.
func (r *queryResolver) GetPosts(ctx context.Context) ([]storage.Post, error) {
	return r.Queries.GetPosts(ctx)
}

// ListAuthors is the resolver for the ListAuthors field.
func (r *queryResolver) ListAuthors(ctx context.Context) ([]storage.Author, error) {
	return r.Queries.ListAuthors(ctx)
}

// Bio is the resolver for the bio field.
func (r *createAuthorInputResolver) Bio(ctx context.Context, obj *storage.CreateAuthorParams, data *string) error {
	if data != nil {
		obj.Bio = pgtype.Text{
			String: *data,
			Valid:  true,
		}
	}
	return nil
}

// Bio is the resolver for the bio field.
func (r *updateAuthorInputResolver) Bio(ctx context.Context, obj *storage.UpdateAuthorParams, data *string) error {
	if data != nil {
		obj.Bio = pgtype.Text{
			String: *data,
			Valid:  true,
		}
	}
	return nil
}

// CreateAuthorInput returns gen.CreateAuthorInputResolver implementation.
func (r *Resolver) CreateAuthorInput() gen.CreateAuthorInputResolver {
	return &createAuthorInputResolver{r}
}

// UpdateAuthorInput returns gen.UpdateAuthorInputResolver implementation.
func (r *Resolver) UpdateAuthorInput() gen.UpdateAuthorInputResolver {
	return &updateAuthorInputResolver{r}
}

type createAuthorInputResolver struct{ *Resolver }
type updateAuthorInputResolver struct{ *Resolver }
